# Filename:      .functions
# Purpose:       personal config file for sh
# Authors:       anhdle14 (github.com/anhdle14), (c) Duc Le <anhdle14@icloud.com>
# Bug-Reports:   see http://github.com/anhdle14/dotfiles/issues
# License:       This file is licensed under the MIT License
################################################################################
# find dir
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
    -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# clipboard history
fh() {
{{- if eq .chezmoi.os "linux" }}
  echo $( (fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//') | xclip -in -selection clipboard
{{- else if eq .chezmoi.os "darwin" }}
  echo $( (fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//') | pbcopy
{{- end }}
}

# git commit browser
fshow() {
  local commit_hash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
  local view_commit="$commit_hash | xargs -I % sh -c 'git show --color=always % | delta'"
  git log --color=always \
    --format="%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" "$@" | \
  fz--no-sort --tiebreak=index --no-multi --reverse --ansi \
    --header="enter to view, alt-y to copy hash" --preview="$view_commit" \
    --bind="enter:execute:$view_commit | less -R" \
    {{- if eq .chezmoi.os "linux" }}
    --bind="alt-y:execute:$commit_hash | xclip -in -selection clipboard"
    {{- else if eq .chezmoi.os "darwin" }}
    --bind="alt-y:execute:$commit_hash | pbcopy"
    {{- end }}
}

## Git #########################################################################
git-remove-all-commit() {
  local branch
  branch=$(git symbolic-ref --short HEAD)
  echo -e "\nDo you want to remove all your commit in \033[1m$branch\033[0m branch? [Y/n] "
  read -r response
  case "$response" in
    [yY][eE][sS]|[yY])
      git checkout --orphan latest_branch
      git add -A
      git commit -am "Initial commit"
      git branch -D "$branch"
      git branch -m "$branch"
      echo -e "\nTo force update your repository, run this command:\n\n    git push -fu origin $branch"
      ;;
    *)
      echo "Cancelled."
      ;;
  esac
}

readme() {
  for readme in {readme,README}.{md,MD,markdown,txt,TXT,mkd}; do
    if [[ -f "$readme" ]]; then
      cat "$readme"
    fi
  done
}

audit() {
  sudo praudit -l /dev/auditpipe
}

open-networks() {
  if ! type "lsof" > /dev/null; then
    sudo praudit -l /dev/auditpipe
  else
    sudo lsof -Pni
  fi
}

encrypt() {
  tar zcvf - $0 | gpg -c > ~/Desktop/backup-$(date +%F-%H%M).tar.gz.gpg
}

decrypt() {
  gpg -o ~/Desktop/decrypt-backup.tar.gz -d $0
  tar zxvf ~/Desktop/decrypt-backup.tar.gz
}

pathpp() {
  local path=${1:-$PATH}
  echo -e ${path//:/\\n}
}

## OS Specific #################################################################
case $(uname 2>/dev/null) in
  Darwin)
    fix-mosh() {
      local fw='/usr/libexec/ApplicationFirewall/socketfilterfw'
      local mosh_sym="$(which mosh-server)"
      local mosh_abs="$(greadlink -f $mosh_sym)"
    
      sudo "$fw" --setglobalstate off
      sudo "$fw" --add "$mosh_sym"
      sudo "$fw" --unblockapp "$mosh_sym"
      sudo "$fw" --add "$mosh_abs"
      sudo "$fw" --unblockapp "$mosh_abs"
      sudo "$fw" --setglobalstate on
    }

    notify() {
      /usr/bin/osascript -e "display notification \"$2\" with title \"$1\""
    }

    fuck-on-vue() {
      defaults write com.apple.dashboard mcx-disable -boolean FALSE
      defaults write com.apple.dock mcx-expose-disabled -boolean FALSE
      killall Dock
    }

    xcode-select() {
      set -x
      if [[ $1 = "--uninstall" ]]; then
        sudo rm -rf /Library/Developer/CommandLineTools
      else
        command xcode-select $1
      fi
      set +x
    }
    ;;
  *)
    ;;
esac

#f2# Find history events by search pattern and list them by date.
function whatwhen () {
  emulate -L zsh
  local usage help ident format_l format_s first_char remain first last
  usage='USAGE: whatwhen [options] <searchstring> <search range>'
  help='Use `whatwhen -h'\'' for further explanations.'
  ident=${(l,${#${:-Usage: }},, ,)}
  format_l="${ident}%s\t\t\t%s\n"
  format_s="${format_l//(\\t)##/\\t}"
  # Make the first char of the word to search for case
  # insensitive; e.g. [aA]
  first_char=[${(L)1[1]}${(U)1[1]}]
  remain=${1[2,-1]}
  # Default search range is `-100'.
  first=${2:-\-100}
  # Optional, just used for `<first> <last>' given.
  last=$3
  case $1 in
    ("")
      printf '%s\n\n' 'ERROR: No search string specified. Aborting.'
      printf '%s\n%s\n\n' ${usage} ${help} && return 1
    ;;
    (-h)
      printf '%s\n\n' ${usage}
      print 'OPTIONS:'
      printf $format_l '-h' 'show help text'
      print '\f'
      print 'SEARCH RANGE:'
      printf $format_l "'0'" 'the whole history,'
      printf $format_l '-<n>' 'offset to the current history number; (default: -100)'
      printf $format_s '<[-]first> [<last>]' 'just searching within a give range'
      printf '\n%s\n' 'EXAMPLES:'
      printf ${format_l/(\\t)/} 'whatwhen grml' '# Range is set to -100 by default.'
      printf $format_l 'whatwhen zsh -250'
      printf $format_l 'whatwhen foo 1 99'
    ;;
    (\?)
      printf '%s\n%s\n\n' ${usage} ${help} && return 1
    ;;
    (*)
      # -l list results on stout rather than invoking $EDITOR.
      # -i Print dates as in YYYY-MM-DD.
      # -m Search for a - quoted - pattern within the history.
      fc -li -m "*${first_char}${remain}*" $first $last
    ;;
  esac
}

# Create small urls via http://goo.gl using curl(1).
# API reference: https://code.google.com/apis/urlshortener/
function zurl () {
  emulate -L zsh
  setopt extended_glob

  if [[ -z $1 ]]; then
    print "USAGE: zurl <URL>"
    return 1
  fi

  local PN url prog api json contenttype item
  local -a data
  PN=$0
  url=$1

  # Prepend 'http://' to given URL where necessary for later output.
  if [[ ${url} != http(s|)://* ]]; then
    url='http://'${url}
  fi

  if check_com -c curl; then
    prog=curl
  else
    print "curl is not available, but mandatory for ${PN}. Aborting."
    return 1
  fi
  api='https://www.googleapis.com/urlshortener/v1/url'
  contenttype="Content-Type: application/json"
  json="{\"longUrl\": \"${url}\"}"
  data=(${(f)"$($prog --silent -H ${contenttype} -d ${json} $api)"})
  # Parse the response
  for item in "${data[@]}"; do
    case "$item" in
      ' '#'"id":'*)
        item=${item#*: \"}
        item=${item%\",*}
        printf '%s\n' "$item"
        return 0
        ;;
    esac
  done
  return 1
}

#f5# List files which have been accessed within the last {\it n} days, {\it n} defaults to 1
function accessed () {
    emulate -L zsh
    print -l -- *(a-${1:-1})
}

#f5# List files which have been changed within the last {\it n} days, {\it n} defaults to 1
function changed () {
    emulate -L zsh
    print -l -- *(c-${1:-1})
}

#f5# List files which have been modified within the last {\it n} days, {\it n} defaults to 1
function modified () {
    emulate -L zsh
    print -l -- *(m-${1:-1})
}

#f5# Create temporary directory and \kbd{cd} to it
function cdt () {
    builtin cd "$(mktemp -d)"
    builtin pwd
}

#f5# Create Directory and \kbd{cd} to it
function mkcd () {
    if (( ARGC != 1 )); then
        printf 'usage: mkcd <new-directory>\n'
        return 1;
    fi
    if [[ ! -d "$1" ]]; then
        command mkdir -p "$1"
    else
        printf '`%s'\'' already exists: cd-ing.\n' "$1"
    fi
    builtin cd "$1"
}

#f5# cd to directory and list files
function cl () {
  emulate -L zsh
  cd $1 && ls -a
}

# smart cd function, allows switching to /etc when running 'cd /etc/fstab'
function cd () {
  if (( ${#argv} == 1 )) && [[ -f ${1} ]]; then
    [[ ! -e ${1:h} ]] && return 1
    print "Correcting ${1} to ${1:h}"
    builtin cd ${1:h}
  else
    builtin cd "$@"
  fi
}

#f5# Backup \kbd{file_or_folder {\rm to} file_or_folder\_timestamp}
function bk () {
  emulate -L zsh
  local current_date=$(date -u "+%Y%m%dT%H%M%SZ")
  local clean keep move verbose result all to_bk
  setopt extended_glob
  keep=1
  while getopts ":hacmrv" opt; do
    case $opt in
      a) (( all++ ));;
      c) unset move clean && (( ++keep ));;
      m) unset keep clean && (( ++move ));;
      r) unset move keep && (( ++clean ));;
      v) verbose="-v";;
      h) <<__EOF0__
bk [-hcmv] FILE [FILE ...]
bk -r [-av] [FILE [FILE ...]]
Backup a file or folder in place and append the timestamp
Remove backups of a file or folder, or all backups in the current directory

Usage:
-h    Display this help text
-c    Keep the file/folder as is, create a copy backup using cp(1) (default)
-m    Move the file/folder, using mv(1)
-r    Remove backups of the specified file or directory, using rm(1). If none
      is provided, remove all backups in the current directory.
-a    Remove all (even hidden) backups.
-v    Verbose

The -c, -r and -m options are mutually exclusive. If specified at the same time,
the last one is used.

The return code is the sum of all cp/mv/rm return codes.
__EOF0__
return 0;;
      \?) bk -h >&2; return 1;;
    esac
  done
  shift "$((OPTIND-1))"
  if (( keep > 0 )); then
    if islinux || isfreebsd; then
      for to_bk in "$@"; do
        cp $verbose -a "${to_bk%/}" "${to_bk%/}_$current_date"
        (( result += $? ))
      done
    else
      for to_bk in "$@"; do
        cp $verbose -pR "${to_bk%/}" "${to_bk%/}_$current_date"
        (( result += $? ))
      done
    fi
  elif (( move > 0 )); then
    while (( $# > 0 )); do
      mv $verbose "${1%/}" "${1%/}_$current_date"
      (( result += $? ))
      shift
    done
  elif (( clean > 0 )); then
    if (( $# > 0 )); then
      for to_bk in "$@"; do
        rm $verbose -rf "${to_bk%/}"_[0-9](#c8)T([0-1][0-9]|2[0-3])([0-5][0-9])(#c2)Z
        (( result += $? ))
      done
    else
      if (( all > 0 )); then
        rm $verbose -rf *_[0-9](#c8)T([0-1][0-9]|2[0-3])([0-5][0-9])(#c2)Z(D)
      else
        rm $verbose -rf *_[0-9](#c8)T([0-1][0-9]|2[0-3])([0-5][0-9])(#c2)Z
      fi
      (( result += $? ))
    fi
  fi
  return $result
}

function ssl-cert-fingerprints () {
  emulate -L zsh
  local i
  if [[ -z $1 ]] ; then
    printf 'usage: ssl-cert-fingerprints <file>\n'
    return 1
  fi
  for i in ${ssl_hashes}
    do ssl-cert-$i $1;
  done
}

function ssl-cert-info () {
  emulate -L zsh
  if [[ -z $1 ]] ; then
    printf 'usage: ssl-cert-info <file>\n'
    return 1
  fi
  openssl x509 -noout -text -in $1
  ssl-cert-fingerprints $1
}

## jdk
jdk() {
  version=$1
  export JAVA_HOME=$(/usr/libexec/java_home -v"$version");
  java -version
}

## backup
backup() {
  command brew bundle dump -f
  command npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >| $HOME/.backups/npm
  command pip3 freeze >| $HOME/.backups/pip
}

## restore
restore() {
  command brew bundle --zap
  command xargs npm install --global < $HOME/.backups/npm
  command pip3 install -r $HOME/.backups/pip
}

## orly
orly() {
  (docker run kirinnee/orly:latest login $1 $ORLY_EMAIL:$ORLY_PASSWORD) >| $HOME/Downloads/$2.epub
}

## tf-boilerplates
tf-module-prepare() {
  touch {variables,providers,backend,outputs,main}.tf
}


## END OF FILE #################################################################
# vim: filetype=zsh foldmethod=marker autoindent expandtab shiftwidth=2
# code: language=shellscript insertSpaces=true tabsize=2
